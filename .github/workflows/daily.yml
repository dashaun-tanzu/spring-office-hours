name: Daily Scheduled Action

on:
  schedule:
    # Runs every day at 03:16 UTC
    - cron: '16 3 * * *'

  # Optional: Allow manual triggering
  workflow_dispatch:

# Add permissions for the workflow
permissions:
  contents: write  # Allows reading and writing repository contents
  actions: read    # Allows reading workflow runs

jobs:
  daily-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Use PAT if GITHUB_TOKEN doesn't have sufficient permissions
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Download latest newsletter-cli release
        run: |
          echo "Downloading latest release from dashaun-tanzu/newsletter-cli..."
          
          # Get the latest release info from GitHub API
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/dashaun-tanzu/newsletter-cli/releases/latest)
          
          # Debug: Show the API response
          echo "API Response:"
          echo "$LATEST_RELEASE" | jq '.' || echo "Failed to parse JSON response"
          
          # Check if we have assets at all
          ASSETS_COUNT=$(echo "$LATEST_RELEASE" | jq '.assets | length' 2>/dev/null || echo "0")
          echo "Number of assets found: $ASSETS_COUNT"
          
          if [ "$ASSETS_COUNT" -eq "0" ]; then
            echo "No assets found in latest release. Available asset names:"
            echo "$LATEST_RELEASE" | jq -r '.assets[]?.name' 2>/dev/null || echo "No assets available"
            exit 1
          fi
          
          # List all available assets
          echo "Available assets:"
          echo "$LATEST_RELEASE" | jq -r '.assets[].name' 2>/dev/null || echo "Could not list assets"
          
          # Try to find the Linux binary (check different possible names)
          DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '
            .assets[] | 
            select(.name | test("newsletter-linux-amd64|newsletter-linux|newsletter_linux")) | 
            .browser_download_url
          ' 2>/dev/null | head -n1)
          
          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" = "null" ]; then
            echo "Could not find Linux binary. Trying first asset as fallback..."
            DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[0].browser_download_url' 2>/dev/null)
          fi
          
          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" = "null" ]; then
            echo "Could not find any downloadable assets"
            exit 1
          fi
          
          echo "Download URL: $DOWNLOAD_URL"
          
          # Download the binary
          curl -L -o newsletter-cli "$DOWNLOAD_URL"
          
          # Make it executable
          chmod +x newsletter-cli
          
          # Verify download
          ls -la newsletter-cli

      - name: Run newsletter-cli
        run: |
          echo "Running newsletter-cli..."
          # Run the newsletter-cli binary (it will update README.md)
          ./newsletter-cli full-update
          mv spring-update.md README.md
          rm ./newsletter-cli

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git status --porcelain
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update README.md via newsletter-cli [skip ci]"
          git push